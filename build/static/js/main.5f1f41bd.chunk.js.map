{"version":3,"sources":["components/AddNumber.js","components/Numbers.js","components/Filter.js","components/Notification.js","services/person.js","App.js","serviceWorker.js","index.js"],"names":["AddNumber","props","onAddNewPerson","onNewNameChange","onNewNumberChange","newName","newNumber","onSubmit","value","onChange","type","Numbers","onDeletePerson","persons","map","person","key","id","name","number","onClick","Filter","onSearchQueryChange","searchQuery","Notification","notification","className","join","message","baseUrl","axios","get","then","r","data","newObject","post","put","delete","App","useState","setPersons","filteredPersons","setFilteredPersons","setNewName","setNewNumber","setNotification","setSearchQuery","useEffect","personService","filter","toUpperCase","includes","event","target","preventDefault","errorMessage","find","p","window","confirm","newPerson","innerPerson","catch","_","concat","error","response","setTimeout","Number","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.5f1f41bd.chunk.js","sourcesContent":["import React from 'react'\n\nconst AddNumber = (props) => {\n  const {onAddNewPerson, onNewNameChange, onNewNumberChange, newName, newNumber} = props\n\n  return (\n    <div>\n      <h1>add a new</h1>\n      <form onSubmit={onAddNewPerson}>\n        <div>\n          name: <input value={newName} onChange={onNewNameChange}/>\n          <br/>\n          number: <input value={newNumber} onChange={onNewNumberChange}/>\n        </div>\n        <button type=\"submit\">add</button>\n      </form>\n    </div>\n  )\n}\n\nexport default AddNumber\n","import React from 'react'\n\nconst Numbers = ({onDeletePerson, persons}) => (\n  <div>\n    <h2>Numbers</h2>\n    {\n      persons.map(person => (\n        <div key={person.id}>\n          {person.name} {person.number}\n          <button onClick={onDeletePerson} value={person.id}>delete</button>\n        </div>)\n                 )\n    }\n  </div>\n    )\n\nexport default Numbers\n","import React from 'react'\n\nconst Filter = ({onSearchQueryChange, searchQuery}) => (\n  <div>\n    filter shown with <input value={searchQuery} onChange={onSearchQueryChange}/>\n  </div>\n)\n\nexport default Filter\n","import React from 'react'\n\nconst Notification = ({notification}) =>\n  notification ? (\n    <div className={[notification.type, 'notification'].join(' ')}>\n      {notification.message}\n    </div>\n  ) : null\n\nexport default Notification\n","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => axios.get(baseUrl).then(r => r.data)\n\nconst create = newObject => axios.post(baseUrl, newObject).then(r => r.data)\n\nconst update = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject).then(r => r.data)\n\nconst remove = (id) => axios.delete(`${baseUrl}/${id}`) //.then(r => r.data)\n\nexport default {\n  getAll,\n  create,\n  update,\n  remove\n}\n","import React, { useState, useEffect } from 'react'\nimport AddNumber from './components/AddNumber'\nimport Numbers from './components/Numbers'\nimport Filter from './components/Filter'\nimport Notification from './components/Notification'\nimport personService from './services/person'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ filteredPersons, setFilteredPersons ] = useState(persons)\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n  const [ searchQuery, setSearchQuery ] = useState('')\n\n  const handleNewNameChange = (event) => setNewName(event.target.value)\n  const handleNewNumberChange = (event) => setNewNumber(event.target.value)\n\n  const handleAddNewPerson = (event) => {\n    event.preventDefault()\n\n    const errorMessage = `Information of ${newName} has already been removed from the server.`\n    let person = persons.find((p) => p.name === newName)\n    if(!person)\n      personService.create({name: newName, number: newNumber})\n                   .then(newPerson => {\n                     setPersons([...persons].concat(newPerson))\n                     const message = `Added ${newPerson.name}`\n                     setNotification({message, type: 'success'})\n                   }).catch(error => {\n                     setNotification({message: error.response.data.error, type: 'failure'})\n                   })\n    else if(window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`)){\n      personService.update(person.id, {...person, number: newNumber}).then(newPerson => {\n        setPersons(persons.map(innerPerson =>\n          innerPerson.id === person.id ? newPerson : innerPerson\n        ))\n        const message = `Updated ${newPerson.name}`\n        setNotification({message, type: 'success'})\n      }).catch(_ => setNotification({message: errorMessage, type: 'failure'}))\n    }\n    setTimeout(() => setNotification(null), 5000)\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleSearchQueryChange = (event) => setSearchQuery(event.target.value)\n\n  const handleDeletePerson = (event) => {\n    const id = Number(event.target.value)\n    const name = persons.find(person => person.id === id).name\n    if(window.confirm(`Delete ${name}`)){\n      setPersons(persons.filter(person => person.id !== id))\n      personService.remove(id)\n    }\n  }\n\n  useEffect(() => {personService.getAll().then(persons => setPersons(persons))}, [])\n\n  useEffect(() => setFilteredPersons(persons.filter(person =>\n    person.name.toUpperCase().includes(searchQuery.toUpperCase())))\n  , [searchQuery, persons])\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification notification={notification}/>\n      <Filter onSearchQueryChange={handleSearchQueryChange}/>\n      <AddNumber onNewNameChange={handleNewNameChange}\n                 onNewNumberChange={handleNewNumberChange}\n                 newNumber={newNumber}\n                 newName={newName}\n                 onAddNewPerson={handleAddNewPerson}/>\n      <Numbers persons={filteredPersons}\n               onDeletePerson={handleDeletePerson}/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}